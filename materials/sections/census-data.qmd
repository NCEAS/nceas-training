## Learning Objectives {.unnumbered}
- Provide an overview of US Census data
- Introduce the main functions of the `tidycensus` package to be able to work with census data
- Review data wrangling function to get census data ready for analysis
- Plot census data using `ggplot2`


:::callout-note
## Acknowledgement

:::

<!--## Overview

- General view of US Census Data
- Decennial US Census
- American Community Survey (ACS)

"While the decennial US Census and American Community Survey are the most popular and widely used datasets produced by the US Census Bureau, the Bureau conducts hundreds of other surveys and disseminates data on a wide range of subjects to the public. These datasets include economic and business surveys, housing surveys, international data, population estimates and projections, and much more; a full listing is available on the Census website."

- How is Census data available
- The Census API -->

## Introduction to `tidycensus`

When working with census data, the general workflow would be to go to [data.census.gov](data.census.gov), filter data and queries based on variables and geographies, and then download the data into a spreadsheet. People that work with census data do this over and over again. 

Kyle Walker, one of the authors of the `tidycensus` package, created the package as a way to systematize the process and do this systematization using R. He learned about the US Census Application Programming Interface (API) which allows developers to access census resources programmatically, therefore incorporated in the package to facilitate access to interact with census data.

Note there are other R packages that interact with the census API, such as `censusapi` and `acs`. However, in this lesson, we are going to focus on the `tidycensus` package, given that is constantly being maintained and has good documentation on how it works.

From Walkers Book:

> "The `tidycensus` is an R package that provides an interface to access and work with the United States Census Bureau data. It simplifies the process of retrieving and analyzing census data by allowing users to query data directly from the Census Bureau's API and then organize the data into a tidy format for easy manipulation and analysis."


### General Structure

Tidycensus takes an opinionated approach to accessing a selected number of census APIs. The main goal is to facilitate access in R to a few APIs.

Through this package, you can access:
- Decennial census (200, 2010, available data from 2020)
- The American Community Survey (ACS) data sets
- Population estimate program (information on yearly estimates and components of change) 
- The ASC Public Use Microdata. Anonymized individual-level records from the ACS organized by households.
- Migration Flows APIs which include information about in and outflows from several geographies from the 5-year ACS samples.


The idea behind this package is to make the tedious process of working with Census data more concise. It pulls data from the census API and returns it to the user in a “tidy” format.

Can easily merge census geometries to data for mapping. Which apparently can be a very time-consuming task. Unfortunately, for this session, we will not get into mapping. See the resource below for Walker’s book and class on how to map census data.


Other features of this package:
- Includes tools for handling margins of errors in the ACS and working with survey weights in the ACS PUMS
- You can request data from states and counties by name instead of FIPS codes.


## Getting Started

::: callout-tip
## Setup

0. Make sure you’re in the right project (`training_{USERNAME}`) and use the `Git` workflow by `Pull`ing to check for any changes. Then, create a new Quarto document, delete the default text, and save this document.

1. Load the packages we'll need:

```{r load_packages}
#| message: false
#| warning: false
#| eval: false

library(tidycensus)
library(dplyr)
library(tidyr)
library(ggplot2)
```

2. Get an API key to connect our session with the census data and be able to retrieve data 
- Go to <https://api.census.gov/data/key_signup.html>
- Fill out the form
- Check your email for your key.

3. Use the `census_api_key()` function to set your key. Note: `install = TRUE` forces r to write this key to a file in our R environment that will be read every time you use R. This means, by setting this argument to `TRUE`, you only have to do it once in any computer you are working. If you see this argument as `FALSE`, R will not remember this key next time you come back.

```{r}
#| eval: false
census_api_key("YOUR KEY GOES HERE", install = TRUE)
```

4. Restart R

5. Run the library chunck again.

:::


Note 1: As we are working on the server, the package is already installed in our system. But when you go work on your own computers, you will have to install the package using `install.package("tidycensus")`, if you haven't done that already.

Note 2: The API key you received in your email is good to use in other instances too. Keep this email! We are using the key to connect your included-crab session with the US Census data. You can use the same key to connect your personal/work computer too.



## Quering data (focus on 2020 decennial data)

### The 2020 Decennial Data
Before we dive into retrieving data from the 2020 decennial census, we need to mention a couple of things. Based on all the challenges of running a decennial census during a pandemic, the Census Bureau had to make decisions and provide new and different functionalists. The pandemic also delayed the release of the 2020 census data. You can check [here](https://www2.census.gov/programs-surveys/decennial/2020/program-management/2010_20_data_product_release_dates.pdf) what data products have been released until now, and the Bureau’s timeline to release more data.

One of the main files from this census is the PL94-171 Redistricting Summary File which is used for congressional appointments and redistricting. Variable available in this file are:
- Total counts (population & households)
- Occupied/vacant housing unit
- Total and voting age population breakdown by race & ethnicity
- Group quarter status
- Demographic and Housing Characteristics Summary Files (Different to summary file 1 form 2010). Contains age and sex breakdowns and detailed race and ethnicity data.


### Getting census data
The main functions from `tidycensus` represent the select number of datasets that this package provides access to. The following table provides the description for each of the core functions from [Walker's book](https://walker-data.com/census-r/an-introduction-to-tidycensus.html#decennial-census).

| Function      | Description                    |
|---------------|--------------------------------|
`get_decennial()`| Retrieves data from the US Decennial Census APIs for 2000, 2010, and 2020.|
|`get_acs()` | Requests data from the 1-year and 5-year American Community Survey samples. Data are available from the 1-year ACS back to 2005 and the 5-year ACS back to 2005-2009.|
|`get_estimates()`| Allows you to get the Population Estimates. These datasets include yearly estimates of population characteristics by state, county, and metropolitan area, along with components of change demographic estimates like births, deaths, and migration rates.|
|`get_pums()` | Accesses data from the ACS Public Use Microdata Sample APIs. These samples include anonymized individual-level records from the ACS organized by household and are highly useful for many different social science analyses |
| `get_flows()` | an interface to the ACS Migration Flows APIs. Includes information on in- and out-flows from various geographies for the 5-year ACS samples, enabling origin-destination analyses.|


Here we are going to focus on getting started with using `get_decennial()` as a way of understanding how this package works. With `get_decennial()`, you can query data from 2000, 2010 and 2020 decennial census. The 3 necessary arguments you need to provide are:
- Geography
- Variable
- Year

So, to get the total population for 2020 by state the code woul look like this.

```{r}
#| eval: false

pop_2020 <- get_decennial(
    geography = "state",
    variable = "P1_001N",
    year = 2020)

```

The resulting data frame you get from this query is a tibble in "tidy" format with 4 columns:
- GEOID = Code for the geographic unit (in this case FIP codes)
- variable = census code for the variable (eg. P1_001N is the code for the total population in the 2020 population redistricting file)
- value = population count

This table is the daa for one single variable. In this case the variable is "P1_001N" which refers to total population.

:::callout-important
## Message error
<!--PASTE IMAGE WITH SCREENSHOT OF ERROR-->

You get this message the first time you run g`et_decennial()` in your session. It first makes sure your are retrieving the correct data. Then it mentions the fact that the 2020 census “Introduces errors differential privacy”.

In the past other privacy methods have been used to preserve confidentiality. Differential privacy is a method that purposely introduces noise or error into the data in order to make it impossible or at least very difficult to reverse engineer the census and track where the responses are coming from. This has an impact on small area counts (e.g.: block with children but not adults). This is something to be aware of if you are working with small population geographies.

Only the population data is differentially infused. The household data is not.
:::

When using `get_decennial()`, you can also specify a specific table instead of only one variable. A table of data contains multiple variables. The code for getting the "P2" table from 2020 would look like this.
```{r}
#| eval: false

table_p2_2020 <- get_decennial(
    geography = "state",
    table = "P2",
    year = 2020)

```


Table P2 is one of the tables of the 2020 census, which provides counts by Race with Hispanic origins.


Let's check which variables we have in the P2 table.

```{r}
#| eval: false

unique(table_p2_2020$variable)

```

One of the hardest things to wrap your head around when using `tidycensus` is understanding the difference between files, tables, and variables and how they work.

My take on this is the following: data is released in files. Each file is a data product from the Census Bureau (find details of the Census data products [here](https://www.census.gov/programs-surveys/decennial-census/decade/2020/planning-management/release/about-2020-data-products.html#redistricting)), for example, PL 94-171. Each of these files contains many tables (P1, P2 .. P5). Each table covers a specific topic. For example, P2 provides counts by race by Hispanic origins. Then each table has multiple variables. The variable code, to my understanding, starts with the table code. For example, the unique codes values we printed from table P2.

How do we navigate all these codes? There is no straightforward way. In part, this dilemma is part of working with census data, which in itself is complicated. However, `tidycensus` provides some help with a function called `load_variables()`

This function scrapes the variables' names from the census website and gives you a data frame that you can interact with. This variable requires you to input a year and a file name.

So let’s run this function and create an object named `vars_pl_2020` This will give us all the variable codes and definitions for the PL94171 redistricting file.

```{r}
#| eval: false

vars_pl_2020 <-  load_variables(2020, "pl")
```


Now, let’s take a look at this data frame. And interactively search for the variables in this file. This data frame has 3 columns, variable’s name, label, and concept, which represent the table’s name.

For example, here we can see the variable “P1_001N” that we used earlier to retrieve the total population by state. We can also scroll down and see that all variables that start with P2, belong to the P2 table “HISPANIC OR LATINO, AND NOT HISPANIC OR LATINO BY RACE”. We can also see the variable codes for the H1 table for Occupancy or Housing.

Tables available in the 2020 Census PL file:

|Table Name | Description|
|-----------|------------|
|H1 |Occupancy status by household|
|P1 | Race by Hispanic origin|
|P3 | Race for the population 18+|
|P4| Race by Hispanic origin for the population 18+|
|P5| Group quarters status |

Note: “Group quarters are places where people live or stay, in a group living arrangement, that is owned or managed by an entity or organization providing housing and/or services for the residents.” ([US Census Bureau Glossary](https://www.census.gov/glossary/?term=Group+quarters+population))


We won’t get into much more detail, but, you can query any of the available files for the 2020 census data. Like the Demographic and Housing Characteristics File (DHC) by running `vars_dhc_2020 -> load_variables(2020, "dhc")`. This is a much larger file with much more tables than the PL file.

The idea behind `load_variables()` is for you to be able to search for the variable code for the variable you need.

Now that we’ve talked about variables let’s talk a little bit about geography and how `tidycensus` makes it easy to query data within census geographies. As we mention in the introduction, census data has a hierarchy of geographies, plus other groups of geographies. This mean we can name the specific geography we want data from. For example, let's get data for Hispanic population the 6 counties around the Delta.

```{r}
#| eval: false

delta_hispanic <- get_decennial(
  geography = "county",
  state = "CA",
  county = c("Alameda", "Contra Costa", "Sacramento", "San Joaquin", "Solano", "Yolo"),
  variables = "P2_002N",
  year = 2020)
```

To learn more about the arguments for geography for each core function of `tidycensus`, check out the documentation [here]() <!--ADD LINK -->


#### Quering for multiple variabels

The `varaible` argument can have as an input a vector of variables. We can create a vector and then call that vector as the input of the `variable` argument, or we can use the concatenate function `c()` and request data from multiple variables.


```{r}
#| eval: false

## Vector with race variables codes

race_vars <- c(
  Hispanic = "P2_002N",
  White = "P2_005N",
  Black = "P2_006N",
  Native = "P2_007N",
  Asian = "P2_008N",
  HIPI = "P2_009N") ## Native Hawaiian and other Pacific Islander

delta_race <- get_decennial(
  geography = "county",
  state = "CA",
  county = c("Alameda", "Contra Costa", "Sacramento", "San Joaquin", "Solano", "Yolo"),
  variables = race_vars,
  summary_var = "P2_001N",
  year = 2020)
```

Note how this table returns the variable name we assigned in the vector above instead of the variable code! This is a handy option, given that the codes can be hard to remember what is what.

Also, note that we added one more argument to our request `summary_var = "P2_001N`. This adds one more column to our output data frame, one with the summary variable value. 

In every table you can generally find a variable that is an appropriate denominators for a group of variables. Following the example above, the P2 table, which provides population by race with Hispanic origin, the variable "P2001N" represents the total population. Because this variable is an an appropriate denominator for the other variables in the table, it helps to have it in a different column to make it easier to calculate proportions or percentage.


<!--## Getting Census Data ready for analysis

## Visualizing Censis Data with `ggplot2` -->


<!--## Maps and Census Data
( Chapter 5 and 6 - 10 min?) -->

