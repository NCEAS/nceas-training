
## Learning Objectives

In this lesson, you will learn:

- What is a __branch__ in Git?
- How to use a branch to organize code
- What is a __tag__ in Git and how is it useful for collaboration?
- New mechanisms to collaborate using __Git__
- What is a __Pull Request__ in GitHub?
- How to contribute code to colleague's repository using Pull Requests

## Branches

Branches are a mechanism to isolate a set of changes in their own thread, allowing multiple 
types of work to happen in parallel on a repository at the same time.  These are most often
used for separating work from multiple collaborators so they don't conflict, or trying out 
experimental work, or for managing bug fixes for historical releases of software. The default 
branch in most new repositories is called `main`, and it is the
branch that is typically shown in the GitHub interface and elsewhere.

```{mermaid}
%%{init: { 'theme': 'neutral' } }%%
gitGraph
    checkout main
    commit
    commit
    commit
```

The `main` branch of a repository is shown above with three commits, each representing one specific version of the repository linked to its parent commit.

But `main` isn't the only branch you can use in a repository. You can create more. Maybe you're not so sure that a new idea will work out in code, and this is where a tool like `Git` shines. Without a tool like `Git`, we might copy analysis.R to another file called analysis-ml.R which might end up having mostly the same code except for a few lines. This isn't particularly problematic until you want to make a change to a bit of shared code and now you have to make changes in two files, if you even remember to.

Instead, with `Git`, we can start a branch. Branches allow us to confidently experiment on our code, all while leaving the old code intact and recoverable.

```{mermaid}
%%{init: { 'theme': 'neutral' } }%%
gitGraph
    checkout main
    commit
    commit
    commit
    branch new-analysis-ml
    commit
    commit
```

So you've been working in a branch and have made a few commits on it and your boss emails again asking you to update the model in some way. If you weren't using a tool like `Git`, you might panic at this point because you've rewritten much of your analysis to use a different method but your boss wants the change to the old method.

But with `Git` and branches, we can continue developing our main analysis at the same time as we are working on any experimental branches. Using `git checkout main`, you can return the state of your working copy to the `main` branch, and make the needed change to the original code, all while saving the code in `new-analysis-ml` for later. Branches are great for experiments but also great for organizing your work generally, especially when each branch is tied to a ticket to discuss progress and issues on that line of work.

```{mermaid}
%%{init: { 'theme': 'neutral' } }%%
gitGraph
    checkout main
    commit
    commit
    commit
    branch new-analysis-ml
    commit
    commit
    checkout main
    commit
```


After all that hard work on the machine learning experiment, you and your colleague could decide to scrap it. It's perfectly fine to leave branches around and switch back to the `main` line of development, but we can also delete them to tidy up.

If, instead, you and your colleague had decided you liked the machine learning experiment, you could also merge the branch with your `main` development line. Merging branches is analogous to accepting a change in Word's Track Changes feature but way more powerful and useful. With the merge, we take all of the changes from the branch, and apply them to the files in the target `main` branch (or whatever branch we are merging into). This might merge smoothly, or may generate a conflict that will need to be resolved if the same files had already been changed on `main`. Either way, when complete, there is a new `merge commit` showing where the two branches came together.

```{mermaid}
%%{init: { 'theme': 'neutral' } }%%
gitGraph
    checkout main
    commit
    commit
    commit
    branch new-analysis-ml
    commit
    commit
    checkout main
    commit
    checkout new-analysis-ml
    commit
    checkout main
    merge new-analysis-ml tag: "final-paper-version"
    commit
```


A key takeaway here is that `Git` can drastically increase your confidence and willingness to make changes to your code and help you avoid problems down the road. Analysis rarely follows a linear path and we need a tool that respects this. The key to that confidence, however, is in understanding what git does with your versions, and how to get back to a previous state when needed.

Finally, imagine that, years later, your colleague asks you to make sure the model you reported in a paper you published together was actually the one you used. Another really powerful feature of `Git` is tags which allow us to label a particular version of our code with a meaningful name. In this case, we are lucky because we tagged the version of our code we used to run the analysis at the time the paper was submitted. Even if we continued to develop beyond last commit (above) after we submitted our manuscript, we can always go back and run the analysis as it was in the past.

### Exercise

Create a new branch in your training repository called `new-feature`, and then make 
changes to the RMarkdown files in the directory.  Commit and push those changes
to the branch. Now you can switch between branches using the GitHub interface.

This can be done directly in the RStudio interface within the `Git` pane using the new branch icon. Alternatively, you can run this line in the Terminal which will create a new branch and switch to it: ```git checkout -b new-feature```  

![](images/git-worfklows-new-branch-button.png){width="80%" fig-align="center"}

After you click that icon, a new dialog box appears where you can create a new branch. Keep the setting to "origin" and keep the box "Sync branch with remote" checked.

![](images/git-workflows-new-branch.png){width="80%" fig-align="center"}

You can now work on the `new-feature` branch in this new workspace independently of the codebase in `main`, and without affecting it. When you have finished and completed your changes, you can either decide to leave it there, delete it, or merge it back to main. To merge this new feature branch back, first checkout the main branch with `git checkout main`, and make a change to one of the files in your main branch -- commit that change, and you will see how you can have different changes stored in different branches. Your repository history should look something like this:

![](images/git-workflows-two-branches.png)

When you are ready to merge the feature branch back into `main`, all you have to do is run `git merge new-feature` from the commandline. After that is complete, your new feature will now be merged back into main and visible from the git history:

![](images/git-workflows-merged-branch.png)
{{< include git-workflows.qmd >}}

