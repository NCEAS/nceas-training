---
bibliography: references.bib
---

## Learning Objectives {.unnumbered}

-   Practice joining datasets together
-   Practice identifying primary and foreign keys
-   Practice using common cleaning and wrangling functions

::: callout-note
## Acknowledgements

These exercises come from Allison Horst's EDS 221: Scientific Programming Essentials Course for the Bren School's Master of Environmental Data Science program.
:::

## Exercise: Practice Joins

These exercises will be using bird survey data collected from the central Arizona-Phoenix metropolitan area by Arizona State University researchers [@warren2021].

::: callout-tip
## Setup

1. Create a new R Markdown file. 
    a. Title it "R Practice: Tidy Data and Joins". 
    b. Save the file and name it "r-practice-tidy-data-joins". 

**Note:** Double check that you're in the right project. Where in RStudio can you check where you are?

2.  Load the following libraries at the top of your R Markdown file.

```{r}
#| code-fold: false
#| eval: false
library(readr)
library(dplyr)
library(lubridate) # for bonus question

# Quick question: Do you get a message after loading the libraries? What is it telling you? Talk to your neighbor about it or write a note in your Rmd.
```

3.  Obtain datasets from the EDI Data Portal [Ecological and social Interactions in urban parks: bird surveys in local parks in the central Arizona-Phoenix metropolitan area](https://portal.edirepository.org/nis/mapbrowse?scope=knb-lter-cap&identifier=256&revision=10). Download the following datasets:

-   `52_pp52_birds_1.csv`
-   `52_pp52_surveys_1.csv`
-   `52_pp52_sites_1.csv`
-   `52_pp52_taxalist_1.csv`

**Note:** It's up to you on how you want to download the data! You can either use the datasets links or manually download the data and then upload the files to RStudio server.

4. Organize your R Markdown in a **meaningful** way. Organization is personal - so this is up to you! Consider the different ways we've organized previous files using: headers, bold text, naming code chunks, comments in code chunks. What is most important is organizing and documenting the file so that your future self (or if you share this file with others!) understands it as well as your current self does right now. 
:::

### Read in the data

::: callout-note
## Question 1

Read in the datasets and store the data frames as `bird_observations`, `sites`, `surveys`, and `taxalist` (it should be clear from the raw file names which is which).
:::

```{r}
#| eval: false

# read in data using datasets links
bird_observations <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=53edaa7a0e083013d9bf20322db1780e")
sites <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=b2466fa5cb5ed7ee1ea91398fc291c59")
surveys <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=81bf72420e69077097fb0790dcdc63a6")
taxalist <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=knb-lter-cap.256.10&entityid=58f863b7e3066e68536a9cacdc7bd58e")

# read in data from the data directory after manually downloading data 
bird_observations <- read_csv("data/52_pp52_birds_1.csv")
sites <- read_csv("data/52_pp52_sites_1.csv")
surveys <- read_csv("data/52_pp52_surveys_1.csv")
taxalist <- read_csv("data/52_pp52_taxalist_1.csv")
```

### Get familiar with the data

::: callout-note
## Question 2a

What functions can you use to explore the data you just read in?
:::

```{r}
#| eval: false

# view data in a spreadsheet-style viewer
View(bird_observations)

# returns dimensions of the dataframe by number of rows and number of cols
dim(bird_observations)

# returns the top six rows of the dataframe
head(bird_observations)

# returns all the columns and some info about the cols
glimpse(bird_observations)

# similar to glimpse but returns some summary statistics about the cols
summary(bird_observations)

# returns column names 
names(bird_observations)

# returns unique values in a column. In this case we can see all the different bird species IDs
unique(bird_observations$species_id)
```

::: callout-note
## Question 2b

What are the primary and foreign keys for each datasets?

**Hint:** Is a primary key necessary to have in a dataset?
:::

<details>

<summary>Answer:</summary>

-   `bird_observations`: Does not have a primary key and foreign key is `survey_id`, `site_id`, `species_id`
-   `sites`: Primary key is `site_id` and foreign key is `site_id`, `survey_id`
-   `surveys`: Does not have a primary key and foreign key is `site_id`
-   `taxalist`: Does not have a primary key and foreign key is `species_id`

</details>

### Create a subset of `bird_observations`

::: callout-note
## Question 3

Write code to create a subset of `bird_observations` called `birds_subset` that only contains observations for birds with species id `BHCO` and `RWBL`, and from sites with site ID `LI-W` and `NU-C`.

**Hint:** What function do you use to subset data by rows?
:::

```{r}
#| eval: false
birds_subset <- bird_observations %>% 
  filter(species_id %in% c("BHCO", "RWBL")) %>% 
  filter(site_id %in% c("LI-W", "NU-C"))
```

### Use `left_join()` to merge `birds_subset` with the datasets `sites` and `taxalist`

::: callout-note
## Qustion 4

Use left join(s) to update `birds_subset` so that it also includes `sites` and `taxalist` information. For each join, include an explicit argument saying which key you are joining by (even if it will just assume the correct one for you). Store the updated data frame as `birds_left`. Make sure to look at the output - is what it contains consistent with what you expected it to contain?
:::

```{r}
#| eval: false
birds_left <- birds_subset %>% 
  left_join(y = sites, by = "site_id") %>% 
  left_join(y = taxalist, by = "species_id")
# don't see x = birds_subset here because piping in birds_subset means it automatically assumes birds_subset as x.
```

### Use `full_join()` to merge `birds_subset` and `sites` data

::: callout-note
## Question 5a

First, answer: what do you expect a `full_join()` between `birds_subset` and `sites` to contain? Write this in your R Markdown or tell a neighbor.
:::

<details>

<summary>Answer:</summary>

I expect to see all columns and all observations from `birds_subset` and all columns from `sites` to be merged into one datasets because in a full join everything is kept.

</details>

::: callout-note
## Questions 5b

Write code to `full_join()` the `birds_subset` and `sites` data into a new object called `birds_full`. Explicitly include the variable you're joining by. Look at the output. Is it what you expected?
:::

```{r}
#| eval: false
birds_full <- birds_subset %>% 
  full_join(x = birds_subset, y = sites, by = "site_id")
```


### Use `inner_join()` to merge `birds_subset` and `taxalist` data

::: callout-note
## Question 6a
First, answer: what do you expect an `inner_join()` between `birds_subset` and `taxalist` to contain? Write this in your R Markdown or tell a neighbor.
:::

<details>

<summary>Answer:</summary>

I expect to only have data merge together based on `species_id` and since there is only `BHCO` and `RWBL` in `birds_subset` then I will only retain data related to those two species. I will also expect to see the columns from `taxalist`: `common_name` and `asu_itis` to be merged into the datasets.

</details>

::: callout-note
## Question 6b
Write code to `inner_join()` the `birds_subset` and `taxalist`, called `birds_inner.` Include an argument for what variable you'll be joining by. Make sure you check the output.
:::

```{r}
#| eval: false
birds_inner <- birds_subset %>% 
  inner_join(x = birds_subset, y = taxalist, by = "species_id")
```

::: callout-note
## Question 6c
What would you get if instead of `inner_join()` you'd used `left_join()` for this example? Write code for the left join and check.
:::

```{r}
#| eval: false
birds_inner_left <- birds_subset %>% 
  left_join(x = birds_subset, y = taxalist, by = "species_id")
```

::: callout-note
## Question 6d
Why does that make sense for this scenario? In what case would you expect the outcome to differ from an `inner_join()`? Write this in your R Markdown or tell a neighbor.
:::

<details>

<summary>Answer:</summary>

I have the same datasets after using both `inner_join()` and `left_join()` where `x = birds_subset` and `y = taxalist`, `by = speices_id`. We expect the same here because there is no `species_id` in `birds_subset` that does not match in taxalist. If there was a `species_id` in `birds_subset` that did NOT exist in `taxalist`, then we would have expected it to see it in the left join because in the left join everything in the left (or `x`) is kept. If it was an inner join then we would not see the bird species id that did NOT exist in `taxalist`. It would be removed because inner only keeps what matches in both.

</details>

## Exercise: Practice Wrangling & Joining Data

### Wrangle `bird_observations` data and merge the data with all the other datasets (`sites`, `surveys`, and `taxalist`)

::: callout-note
## Question 7a
Starting with your object `bird_observations`, rename the `notes` column to `bird_obs_notes` (so this doesn't conflict with `notes` in the `surveys` datasets).
:::

```{r}
#| eval: false
bird_observations <- bird_observations %>% 
  rename(bird_obs_notes = notes)
```

::: callout-note
## Question 7b

- Create a subset that contains all observations in the `birds_observations` dataset, 
- then join the `taxalist`, `sites` and `surveys` datasets to it, 
- and finally limit to only columns `survey_date`, `common_name`, `park_name`, `bird_count`, and `observer`. 

You can decide the order that you want to create this in (e.g. limit the columns first, then join, or the other way around).

**Hint:** What function do you use to subset data by columns?
:::

```{r}
#| eval: false
bird_obs_subset <- bird_observations %>% 
  full_join(y = taxalist, by = "species_id") %>% 
  full_join(y = sites, by = c("site_id", "survey_id")) %>% 
  full_join(y = surveys, by = "site_id") %>%
  select(c(survey_date, common_name, park_name, bird_count, observer))
```

### Explore `observer` data and fix the values within this column so that all values are in the same format

::: callout-note
## Question 8a
Continuing with `bird_obs_subset`, first use `unique()` to see the different unique values in the column `observer`. How many observers are there? Which value is unlike the others?
:::

```{r}
#| eval: false
unique(bird_obs_subset$observer)
```

::: callout-note
## Question 8b
Replace "Josh Burns" with a format that matches the other observer names. Then use `unique()` again to check your work.

**Hint:** What function do you use when you are making a change to an entire column?
:::

```{r}
#| eval: false
bird_obs_subset <- bird_obs_subset %>% 
  mutate(observer = if_else(observer == "Josh Burns", "J. Burns", observer))

unique(bird_obs_subset$observer)
```

### Bonus: Use a new package `lubridate` to wrangle the date data and find the total number of birds by park and month

**Hint:** How do you learn about a new function or package?

::: callout-note
## Bonus Question(s)

1. Use `lubridate::month()` to add a new column to `bird_obs_subset` called `survey_month`, containing only the month number. Then, convert the month number to a factor (again within `mutate()`).

2. Use `dplyr::relocate()` to move the new `survey_month` column to immediately after the `survey_date` column. You can do this in a separate code chunk, or pipe straight into it from your existing code.

3. Filter to only include parks `Lindo`, `Orme`, `Palomino`, and `Sonrisa`.

4. Find the total number of birds observed by park and month (**Hint:** You can use `group_by()` and `summarize()`).
:::

```{r}
#| eval: false
bird_obs_subset <- bird_obs_subset %>% 
  mutate(survey_month = lubridate::month(survey_date)) %>% 
  mutate(survey_month = as.factor(survey_month)) %>% 
  dplyr::relocate(survey_month, .after = survey_date) %>% 
  filter(park_name %in% c("Lindo", "Orme", "Palomino", "Sonrisa")) %>% 
  group_by(park_name, survey_month) %>% 
  summarize(tot_bird_count_month = n())
```

Take a look at your final dataset. Does it give you the outcome you expected? Is it informative? How would you improve this wrangling process?
