

## Data Visualization with `ggplot` and `leaflet` {.unnumbered}

## Learning Objectives {.unnumbered}

- The basics of the `ggplot2` package to create static plots
- How to use `ggplot2`'s `theme` abilities to create publication-grade graphics
- The basics of the `leaflet` package to create interactive maps

## Overview

`ggplot2` is a popular package for visualizing data in R.
From the [home page](http://ggplot2.tidyverse.org/):

> ggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.


It's been around for years and has pretty good documentation and tons of example code around the web (like on [StackOverflow](https://stackoverflow.com/questions/tagged/ggplot2)). THe goal of this lesson is to introduce you to the basic components of working with ggplot2 and inspire you to go and explore this awsome resource for visualizing your data.

::: callout-important

## `ggplot2` vs base graphics in R vs others
There are many different ways to plot you data in R. All of them work! However, `ggplot2` excels at making complicated plots easy and easy plots simple enough

Base R graphics  (`plot()`, `hist()`, etc) can be helpful for simple, quick and dirty plots. `ggplot2` can be used for almost everything else.

:::

Let's dive into crating and customizing plots with `ggplot2`.

::: callout-tip
## Setup

Open a new RMarkdown document and remove the filler text.

1. Load the packages we'll need:

```{r load_packages}
#| eval: false
#| message: false
#| warning: false
  library(leaflet)
  library(dplyr)
  library(tidyr)
  library(ggplot2)
  library(DT)
  library(scales)
```


2. Load the data table directly from the KNB Data Repository, if it isn't already present on your local computer.  This technique only downloads the file if you need it.

```{r read_data}
#| eval: false
#| message: false
#| warning: false
data_url <- "https://knb.ecoinformatics.org/knb/d1/mn/v2/object/urn%3Auuid%3Af119a05b-bbe7-4aea-93c6-85434dcb1c5e"

escape <- tryCatch(
    read.csv("data/escapement.csv"),
    error=function(cond) {
        message(paste("Escapement file does not seem to exist, so get it from the KNB."))
        esc <- read.csv(url(data_url, method = "libcurl"))
        return(esc)
    }
)

head(esc)
```

Otherwise, the straightforward code to load the data:

```{r}
escape <- read_csv("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/urn%3Auuid%3Af119a05b-bbe7-4aea-93c6-85434dcb1c5e")
```

3. Before we continue, let's understand what this data is about by checking out the data package [here](https://knb.ecoinformatics.org/view/doi%3A10.5063%2FP26WJJ)

4. Finally, let's explore the data we just read into our working environment. 

```{r}
#| eval: false
## Check out column names
colnames(escape)

## Peak at each column and class
glimpse(escape)

## From when to when
range(escape$sampleDate)

## How frequent?
head(escape$sampleDate)
tail(escape$sampleDate)

## Which species?
unique(escape$Species)

```

:::

Now that we have read out data and have done some exploration. Let's put our data wrangling skills to practice. 
- We are going to calculate the annual escapement by species and region,
- Then filter the main 5 salmon species (Chinook, Sockeye, Chum, Coho and Pink)

```{r mean_esc}

annual_esc <- esc %>% 
  separate(sampleDate, c("Year", "Month", "Day"), sep = "-") %>% 
  mutate(Year = as.numeric(Year)) %>% 
  group_by(Species, SASAP.Region, Year) %>% 
  summarize(escapement = sum(DailyCount)) %>% 
  filter(Species %in% c("Chinook", "Sockeye", "Chum", "Coho", "Pink"))

head(annual_esc)
```

The chunk above used a lot of the dplyr commands that we've used, and some that are new. The `separate` function is used to divide the sampleDate column up into Year, Month, and Day columns, and then we use `group_by` to indicate that we want to calculate our results for the unique combinations of species, region, and year.  We next use `summarize` to calculate an escapement value for each of these groups. Finally, we use a filter and the `%in%` operator to select only the salmon species.


### Static figures using `ggplot2`

First, we’ll cover some ggplot2 basics to create the foundation of our plot. Then, we’ll add on to make our great customized data visualization.

#### Essentials components
1. Indicate we are using `ggplot` (call the `ggplot2::ggplot()` function)
2. What data do we want to plot? (`data = my_data`)
3. What is my mapping aesthetics? What variables do we want to plot? (define using`aes()` function)
4. Define the geometry of our plot. This specifies the type of plot we're making (use `geom_*()` to indicate the type of plot e.g: point, bar, etc.)

::: {callout-caution icon=false}
## Keep in mind
 To add layers to our plot, for example, additional geometries/aesthetics and theme elements or any `ggplot` object using we use `+`.

:::


For example, let's plot total escapement by species. We will show this by creating the same plot in 3 slightly different ways. Each of the options below have the essential pieces of a ggplot.


```{r plot_esc}
#| eval: false

## Option 1
ggplot(data = annual_esc, 
       aes(x = Species, y = escapement)) +
  geom_col()

## Option 2
ggplot(data = annual_esc)+
    geom_col(aes(x = Species, y = escapement))


## Option 3
ggplot()+
    geom_col(data = annual_esc,
             aes(x = Species, y = escapement))

```

They all will create the same plot:

```{r}
#| echo: false

ggplot(data = annual_esc, 
       aes(x = Species, y = escapement)) +
  geom_col()
```


::: callout-important
## `ggplot2` and the pipe operator

Just like in `dplyr` and `tidyr`, we can also pipe a `data.frame` directly into the first argument of the `ggplot` function using the `%>%` operator.

This can certainly be convenient, but use it carefully! Combining too many data-tidying or subsetting operations with your `ggplot` call can make your code more difficult to debug and understand.
:::

Having the basic structure with the essential components in mind, we can easily change the type of graph by updating the `geom_*`.

Next, we will use the pipe operator to pass in a filtered version of `annual_esc`, and make a plots with different geometries.


**Boxplot**
```{r}
annual_esc %>% 
    filter(Year == 1974,
           Species %in% c("Chum", "Pink")) %>% 
ggplot(aes(x = Species, y = escapement)) +
  geom_boxplot()
```

**Violin plot**
```{r}
annual_esc %>% 
    filter(Year == 1974,
           Species %in% c("Chum", "Pink")) %>% 
ggplot(aes(x = Species, y = escapement)) +
    geom_violin()

```


**Line and point**
```{r}
annual_esc %>% 
    filter(Species  == "Sockeye",
           SASAP.Region == "Bristol Bay") %>% 
ggplot(aes(x = Year, y = escapement)) +
    geom_line()+
    geom_point()
    
```

Now let's go back to our base bar graph. What if we want our bars to be blue instead of gray? You might think we could run this:

```{r}

ggplot(annual_esc, 
       aes(x = Species, y = escapement, 
           fill = "blue")) +
  geom_col()
```

Why did that happen?

Notice that we tried to set the fill color of the plot inside the mapping aesthetic call. What we have done, behind the scenes, is create a column filled with the word "blue" in our dataframe, and then mapped it to the `fill` aesthetic, which then chose the default fill color of red. 

What we really wanted to do was just change the color of the bars. If we want do do that, we can call the color option in the `geom_bar` function, **outside** of the mapping aesthetics function call.

```{r}

ggplot(annual_esc, 
       aes(x = Species, y = escapement)) +
  geom_col(fill = "blue")
```

What if we did want to map the color of the bars to a variable, such as region.

`ggplot` is really powerful because we can easily get this plot to visualize more aspects of our data.

```{r}
ggplot(annual_esc, 
       aes(x = Species, y = escapement, 
           fill = SASAP.Region)) +
  geom_col()
```


#### Creating multiple plots {-}

We know that in the graph we just plotted, each bar has escapement for multiple years. Let leverage on the power of `ggplot` to plot more aspect of our data in one plot.

We are going to plot escapement by species over time, since the year 2000, for each region. 

A easy way to plot another aspect of your data is using the function `facet_wrap()`. This function takes a mapping to a variable using the syntax `~variable_name`. The `~` (tilde) is a model operator which tells `facet_wrap` to model each unique value within `variable_name` to a facet in the plot.

The default behavior of facet wrap is to put all facets on the same x and y scale. You can use the `scales` argument to specify whether to allow different scales between facet plots (e.g `scales = "free_y"` to free the y axis scale). You can also specify the number of columns using the `ncol = ` argument or number of rows using `nrow =`.

```{r, fig.height = 7, fig.width = 6}
## Subset with data from year 2000 to 2016

annual_esc_2000s <- annual_esc %>% 
           filter(Year %in% c(2000:2016))

## Quick check
unique(annual_esc_2000s$Year)


## Plot
ggplot(annual_esc_2000s,
       aes(x = Year, 
           y = escapement, 
           color = Species)) + 
    geom_line() +
    geom_point() +
    facet_wrap(~SASAP.Region, 
               scales = "free_y")
   
```


#### Setting ggplot themes {-}

Now let's work on making this plot look a bit nicer. Add a title using `ggtitle()`, adjust labels using `ylab()`, and include a built in theme using `theme_bw()`. There are a wide variety of built in themes in ggplot that help quickly set the look of the plot. Use the RStudio autocomplete `theme_` `<TAB>` to view a list of theme functions.



```{r}
ggplot(annual_esc_2000s,
       aes(x = Year, 
           y = escapement, 
           color = Species)) + 
    geom_line() +
    geom_point() +
    facet_wrap(~SASAP.Region, 
               scales = "free_y")+
    ylab("Escapement") +
    ggtitle("Annual Salmon Escapement by Region") +
    theme_bw()
```

You can see that the `theme_bw()` function changed a lot of the aspects of our plot! The background is white, the grid is a different color, etc. There are lots of other built in themes like this that come with the `ggplot2` package.

::: callout-note

## Exercise

Use the RStudio autocomplete, the `ggplot2` documentation, a cheatsheet, or good old google to find other built in themes. Pick out your favorite one and add it to your plot.

:::

The built in theme functions (`theme_*`) change the default settings for many elements that can also be changed individually using the`theme()` function. The `theme()` function is a way to further fine-tune the look of your plot. This function takes MANY arguments (just have a look at `?theme`). Luckily there are many great ggplot resources online so we don't have to remember all of these, just google "ggplot cheatsheet" and find one you like.

Let's look at an example of a `theme` call, where we change the position of the legend from the right side to the bottom, and remove it's title.

```{r}
ggplot(annual_esc_2000s,
       aes(x = Year, 
           y = escapement, 
           color = Species)) + 
    geom_line() +
    geom_point() +
    facet_wrap(~SASAP.Region, 
               scales = "free_y")+
    ylab("Escapement") +
    ggtitle("Annual Salmon Escapement by Region") +
    theme_light()+
    theme(legend.position = "bottom", 
          legend.title = element_blank())
```


Note that the `theme()` call needs to come after any built in themes like `theme_bw()` are used. Otherwise, `theme_bw()` will likely override any theme elements that you changed using `theme()`.

You can also save the result of a series of `theme()` function calls to an object to use on multiple plots. This prevents needing to copy paste the same lines over and over again!

```{r}

my_theme <- theme_light() + 
  theme(legend.position = "bottom", 
        legend.title = element_blank())
```

So now our code will look like this.
```{r}
ggplot(annual_esc_2000s,
       aes(x = Year, 
           y = escapement, 
           color = Species)) + 
    geom_line() +
    geom_point() +
    facet_wrap(~SASAP.Region, 
               scales = "free_y")+
    ylab("Escapement") +
    ggtitle("Annual Salmon Escapement by Region") +
    my_theme
```


::: callout-note
## Exercise

Using whatever method you like, figure out how to rotate the x-axis tick labels to a 45 degree angle.

Hint: You can start by looking at the documentation if the function by typing `?theme()` in the console. And googling is a great way to figure out how to do the modifications you want to your plot.

:::

#### Smarter tick labels using `scales` {-}

Fixing tick labels in `ggplot` can be super annoying. The y-axis labels in the plot above don't look great. We could manually fix them, but it would likely be tedious and error prone.

The `scales` package provides some nice helper functions to easily rescale and relabel your plots. Here, we use `scale_y_continuous` from `ggplot2`, with the argument `labels`, which is assigned to the function name `comma`, from the `scales` package. This will format all of the labels on the y-axis of our plot with comma-formatted numbers.

```{r}

ggplot(annual_esc_2000s,
       aes(x = Year, 
           y = escapement, 
           color = Species)) + 
    geom_line() +
    geom_point() +
    scale_y_continuous(labels = comma) +
    facet_wrap(~SASAP.Region, 
               scales = "free_y")+
    ylab("Escapement") +
    ggtitle("Annual Salmon Escapement by Region") +
    my_theme

```

#### Reordering things

`ggplot` loves putting things in alphabetical order. But generally, that's not the order you actually want things to be plotted.

!!NEEDS DESCRITPTION!!!

```{r}

## Number Years of data for each salmon species at Kuskokwim
n_years <- annual_esc %>% 
    group_by(SASAP.Region, Species) %>% 
    summarise(n = n()) %>% 
    filter(SASAP.Region == "Kuskokwim")
    
## base plot
ggplot(n_years,
       aes(x = Species, 
           y = n))+
    geom_bar(aes(fill = Species), 
             stat = "identity")

## Reordering, flipping coords and other customization
ggplot(n_years,
       aes(x = fct_reorder(Species, n), 
           y = n))+
    geom_bar(aes(fill = Species), 
             stat = "identity")+
    coord_flip()+
    theme_minimal()+
    ## another way to customize labels
    labs(x = "Species",
         y = "N years of data",
         title = "Number of years of escapement data for salmon species in Kuskokwim")+
    theme(legend.position = "none")

```


#### Saving plots

Saving plots using ggplot is easy! The `ggsave` function will save either the last plot you created, or any plot that you have saved to a variable. You can specify what output format you want, size, resolution, etc.

```{r}
#| eval: false
ggsave("kodiak_esc.png", width = 3, height = 3, units = "in")
```





### Interactive visualization using `leaflet` and `DT`

#### Tables {-}

Now that we know how to make great static visualizations, lets introduce two other packages that allow us to display our data in interactive ways. These packages really shine when used with GitHub pages, so at the end of this lesson we will publish our figures to the website we created earlier [this lesson](publishing-analyses-to-the-web.html).

First let's show an interactive table of unique sampling locations using `DT`.
Write a `data.frame` containing unique sampling locations with no missing values using two new functions from `dplyr` and `tidyr`: `distinct()` and `drop_na()`.

```{r uniq_locations}
#| eval: false
locations <- esc %>% 
  distinct(Location, Latitude, Longitude) %>% 
  drop_na()
```

And display it as an interactive table using `datatable()` from the `DT` package.

```{r display_locations}
#| eval: false
datatable(locations)
```

#### Maps {-}

Similar to `ggplot2`, you can make a basic `leaflet` map using just a couple lines of code. Note that unlike `ggplot2`, the `leaflet` package uses pipe operators (`%>%`) and not the additive operator (`+`).

The `addTiles()` function without arguments will add base tiles to your map from [OpenStreetMap](https://www.openstreetmap.org/). `addMarkers()` will add a marker at each location specified by the latitude and longitude arguments. Note that the `~` symbol is used here to model the coordinates to the map (similar to `facet_wrap` in ggplot).

```{r simple_map}
#| eval: false
leaflet(locations) %>% 
  addTiles() %>% 
  addMarkers(lng = ~Longitude, 
             lat = ~Latitude, 
             popup = ~ Location)
```

You can also use `leaflet` to import Web Map Service (WMS) tiles. Here is an example that utilizes the General Bathymetric Map of the Oceans [(GEBCO)](https://www.gebco.net/) WMS tiles. In this example, we also demonstrate how to create a more simple circle marker, the look of which is explicitly set using a series of style-related arguments..

```{r}
#| eval: false
leaflet(locations) %>% 
  addWMSTiles("https://www.gebco.net/data_and_products/gebco_web_services/web_map_service/mapserv?request=getmap&service=wms&BBOX=-90,-180,90,360&crs=EPSG:4326&format=image/jpeg&layers=gebco_latest&width=1200&height=600&version=1.3.0",
              layers = 'GEBCO_LATEST',
              attribution = "Imagery reproduced from the GEBCO_2022 Grid, WMS 1.3.0 GetMap, www.gebco.net") %>%
  addCircleMarkers(lng = ~Longitude,
                   lat = ~Latitude,
                   popup = ~ Location,
                   radius = 5,
                   # set fill properties
                   fillColor = "salmon",
                   fillOpacity = 1,
                   # set stroke properties
                   stroke = T,
                   weight = 0.5,
                   color = "white",
                   opacity = 1)
```

Leaflet has a ton of functionality that can enable you to create some beautiful, functional maps with relative ease. [Here](https://pages.github.nceas.ucsb.edu/NCEAS/sasap-data/language_vis.html) is an example of some we created as part of the SASAP project, created using the same tools we showed you here. This map hopefully gives you an idea of how powerful the combination of RMarkdown and GitHub pages can be. 


### Resources

- Lisa Charlotte Rost. (2018) [Why not to use two axes, and what to use instead: The case against dual axis charts](https://blog.datawrapper.de/dualaxis/)
