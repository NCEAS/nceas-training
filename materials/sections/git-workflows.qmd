## Learning Objectives {.unnumbered}

- Become familiar with additional mechanisms to collaborate using `Git`
- Contribute code to a colleague’s repository using Pull Requests
- Use branches to organize code and features in a project
- Understand the difference between workflows and when to use them

## Why understanding and learning `Git` workflows are important

When working with a team on a Git-managed project, it’s important to make sure the team is all in agreement on how the flow of changes will be applied. To ensure the team is on the same page, an agreed-upon Git workflow should be developed or selected. There are several publicized Git workflows that may be a good fit for your team. Here, we will discuss some of these Git workflow options.

The array of possible workflows can make it hard to know where to begin when implementing Git in the workplace. This page provides a starting point by surveying the most common Git workflows for software teams.

As you read through, remember that these workflows are designed to be guidelines rather than concrete rules. We want to show you what’s possible, so you can mix and match aspects from different workflows to suit your individual needs.

## Pull Requests

## Branch Workflow

### How it Works

### Exercise: create a branch, make a change by adding a new file with some code?? then do a PR

## Forking Workflow

### How it Works

### Exercise: Fork a repo, make a change, then PR, then sync

## Comparing workflows

There is no one-size-fits-all Git workflow
A workflow should be simple and enhance the productivity of your team

Table of workflows?
Name | Use case 

## Resources

Atlassian Git pages