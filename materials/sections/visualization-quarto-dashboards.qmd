## Learning Objectives {.unnumbered}

-   Create and design customized dashboards using Quarto Dashboards
- Become familiar with different components of a dashboard and it's syntax
<!---   Apply Markdown syntax, Shiny elements, and additional R packages like plotly to create visually appealing and interactive Quarto dashboards. -->

## What is a Quarto Dashboard?

It a tool that aims to make it simple to create compelling interactive dashboards in R (and/or Python, Julia and Observable) ([quarto.org](https://quarto.org/docs/dashboards/). These dashboards are designed to be easy to create, and support a wide variety of visualizations and interactive components. We can incorporate Shiny widgets and functionality into a dashboards, making it a powerful tool for creating interactive visualizations and outcomes that can be shared with others.

Quarto Dashboards are inherit form [`flexdashboards`](https://pkgs.rstudio.com/flexdashboard/), an R package to create interactive dashboard using RMarkdown.


- They are composed in charts, these charts are the atomic unit of a dashboard.
- You can custom the layout incorporating pages, tabsets and sidebars and more.


::: {.callout-important icon="false"}
### Quart Dashboards run only in Quarto version 1.4

Check you quarto version by running `quarto check` in the terminal. This prints a message that starts indication the quarto version installed in your system.
```
Quarto 1.4.551
[âœ“] Checking versions of quarto binary dependencies...
      Pandoc version 3.1.11: OK
      Dart Sass version 1.69.5: OK
      Deno version 1.37.2: OK
```

You can download the latest version of Quarto [here](https://quarto.org/docs/download/).

:::


##  Dashboard Components Overview

| Component | Example |
|-----------|---------|
|Navigation Bar| Top page bar with icon, title, author and links to sub-pages (if added).|
|Pages, Rows, Columns, and Tabsets| Pages, rows and columns are defined using markdown headings (with optional attributes to control height, width, etc.). Tabsets can be used to further divide content within a row or column.|
|Cards, Sidebars, and Toolbars | Cards are containers for plots, data display, and free form content. The content of cards typically maps to cells in your notebook or source document. Sidebars and toolbars are used to present inputs within interactive dashboards.|

Source: [Quarto.org/docs/dashboards](https://quarto.org/docs/dashboards/)

### Examples

1. [Housing Market at a Glance](https://ivelasq.github.io/mortgage-dashboard/)

![](images/dashboard-housing-market.png){width=50%}


2. [New Zealand Earthquakes](https://colorado.posit.co/rsc/nz-quakes/quakes.html)

![](images/dashboard-nz-earthquakes.png){width=50%}


3. [Diamonds Data](https://jjallaire.shinyapps.io/diamonds/) (with Shiny elements)

![](images/dashboard-diamonds.png){width=50%}


## Basic Structure

Now let's familiarize ourselves with how an `.qmd` is structured to create a Quarto Dashboard and how to create a dashboard in it's simplest form.

The first step is to indicate in our `.qmd` file YAML that we want to create a dashboard as the output of this file. Our YAML will look like this:

![](images/dashboard-yaml.png){width=50%}


Now, remember that we said that we need to know/understand Markdown to provide structure to our dashboard. In it simplest form, the basic structure of a dashboard can be summarized in three lines:

-   Each Level 1 header (#) corresponds to a new page.

-   Every Level 2 header (##) introduces a new row.

-   Every code chunk introduces a new column.

Let's see how this looks in practice.


[ADD IMAGE OF CODE + PREVIEW --> qd-structure.qmd]


Quarto will automatically divide the area into equally divided charts.

## Further Layout customization
- Arranging the lay out with row and column height and width {height-70%}
- fill vs flow
- Orientation
- 

Walk through this: https://quarto.org/docs/dashboards/layout.html



## Adding Components

### Navigation Bar {.unnumbered}
The default dashboard includes a navigation bar at the top where you can add a title to your dashboard, a logo and the author of the work. It also allows has the link to the different pages in a dashboard with multiple pages.


### Pages {.unnumbered}
You can introduce multiple pages to a single dashboard using level 1 header in Markdown (#), above the level 2 header used to define rows and columns within a page. The text of the level 1 headings will be used to link to the pages in the navigation bar.


### Sidebar {.unnumbered}
Add a side bar by adding a level 2 header with the `{.sidebar}` class. The sidebar will allows the user to interact with the data presented in the dashboard.

<!--- Global, to a page or to part of the page + location (left or right)-->

### Toolbars {.unnumbered}
Toolbars are similar to sidebars, but provide a horizontal layout. Create a toolbar by adding the `{.toolbar}` class to a level 2 row header.

<!--Global, inline, part of a row and location-->

### Cards {.unnumbered}
Cards are the fundamental unit of display within dashboards. Cards are created automatically for cells and markdown content that are within rows and columns. 


### Tabsets {.unnumbered} 
Use tabsets to include multiple views of data or to include content of secondary importance without having it crowd the main display. Tabsets are created by adding the `{.tabset}` class to a row or column.


## Displying Data 
Here we present a few options, however we encourage you to explore all the other many functionalities that dashboards provides to present data.

### Plots {.unnumbered}

**Interactive plots with htmlwidgets**

### Tables {.unnumbered}

### Value Box {.unnumbered}

### Interactivity with Shiny {.unnumbered}

## Deployment
Dashboards are generally just HTML pages that can be deployed to any web server or host.



## Demo: Creating a Quarto Dashboard

::: {.callout-tip icon="false"}
### Setup

Fork the [NCEAS/quarto-demo-lh repository](https://github.com/NCEAS/quarto-dashboard-demo-lh) from the [NCEAS GitHub organization](https://github.com/nceas) and use the materials in the Git repo to follow along with the demonstration of Quarto Dashboard examples.
:::

The demonstration will include examples that showcase different dashboard features:

1.  Basic dashboard from Template
2.  Multipage layout with interactive elements
3.  Reactive dashboard using `shiny` elements


::: {.callout-note icon="false"}
### Exercise: Your turn!

In the Themed Flexdashboard, use the `palmerpenguins` data to complete the following tasks:

1.  **Fill in the boxes**:
    a.  In the Chart A box, add a scatterplot of your choosing.
    b.  In the Chart B box, add a table using either `kable()` or `DT`.
    c.  In the Chart C box, add a `valueBox`.
    d.  *Optional* Explore the [htmlwidgets for R gallery](https://gallery.htmlwidgets.org/), choose one you like and replace Chart D with that widget.
2.  **Change the theme using `bslib::bs_themer()`**. To activate the Theme Customizer, complete these steps:
    a.  Add to the YAML `runtime: shiny`
    b.  Add `bslib::bs_themer()` to the setup chunk
    c.  Save the `.Rmd`
    d.  Click "Run Document" and open the dashboard in a browser window for optimal experience
3. **Add a new page** then create a second Page using `{data-navmenu}`.

***Note***: You're welcome to use the code from the demo so you can quickly start playing with the different flexdashboard features.
:::

<!--## Publishing a Flexdashboard -->


## Dashboard vs Shiny 

::: {.callout-note icon="false"}
### When should I make a Dashboard?

Dashboards are great for creating lightweight interactive output that require minimal coding expertise (must be familiar with Markdown!). Ultimately, it depends on what your final product is and what skillset your team has. Check out the diagram below and see what scenarios resonate best with you and your project goals.
:::

```{mermaid}
<!-- #| fig-width: '100%' -->
<!-- #| fig-height: '100%' -->

flowchart TD
    A[Goal: Create a web-based application for data interaction]
    A --> B{Shiny App}
    A --> C{Quarto Dashboard}
    C --> D(Build a Dashboard if:)
    B --> E(Build a Shiny App if:)
    D --> F[Interested in quickly creating a dashboard prototype]
    F --> G[Have a preference for Quarto]
    G --> H[There are non-programmers who need to create or maintain dashboards]
    H --> I[Want to blend narrative text with interactivity]
    I --> J[Prefer a simpler, code-light approach]
    J --> K[Dashboard requirements are relatively static]
    E --> L[Dashboard requires a highly customized user interface]
    L --> M[Dashboard needs to perform complex data analysis with user inputs]
    M --> N[Dashboard requires real-time data updates]
    N --> O[There are programmers familiar with reactive programming in R to create or maintain dashboards]
    O --> P[Dashboard requires a multi-page app with navigation]
    
    

```






## Additional Resources

-   [RStudio `flexdashboard` vingettes](https://pkgs.rstudio.com/flexdashboard/) (The articles under the "Articles" dropdown menu are particularly helpful!)
-   [RStudio `flexdashboard` Examples](https://pkgs.rstudio.com/flexdashboard/articles/examples.html)
-   [R Markdown: The Definitive Guide Chapter 5: Dashboards](https://bookdown.org/yihui/rmarkdown/dashboards.html) by Yihui Xie, J. J. Allaire, and Garrett Grolemund
-   [htmlwidgets for R](https://www.htmlwidgets.org/index.html): Check out widgets featured either in the [gallery](https://gallery.htmlwidgets.org/) or the [showcase](https://www.htmlwidgets.org/showcase_leaflet.html)
