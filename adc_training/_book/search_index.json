[
["query-and-download.html", "4 Query and Download 4.1 Query with R 4.2 Find data on thawing and download it all", " 4 Query and Download The Arctic Data Center supports the DataONE API which means it lets us have programattic access to most aspects of the system: Find data Get data Submit data Finding data through the DataONE API differs from searching directly through our website in that the DataONE API supports a much richer set of query options than our website. Like many DataONE member nodes, the Arctic Data Center runs a Solr index for easy querying which can be queried so long as you know how to use Solr and where to point your query. You can use your web browser, curl, any Solr library you prefer or the dataone R package to query the Arctic Data Center. To get a list of fields you can query, visit: https://arcticdata.io/metacat/d1/mn/v2/query/solr (Either in your web browser or your programming language of choice) And to query the Solr endpoint, you can do something like this: https://arcticdata.io/metacat/d1/mn/v2/query/solr/?q=*.* which returns any Object stored in the index. 4.1 Query with R Let’s see how the dataone package can be used to query and download data objects from the Arctic Data Center. First, load the dataone package: library(dataone) Then we need to specify the Member Node we want to query (Arctic Data Center in this case): cn &lt;- CNode(&quot;PROD&quot;) mn &lt;- getMNode(cn, &quot;urn:node:ARCTIC&quot;) Every Solr query is made up of a set of parameters which we need to set up. An R list is one of the easiest ways to do this: params &lt;- list( &quot;q&quot; = &quot;*:*&quot;, &quot;rows&quot; = &quot;5&quot;, &quot;fl&quot; = &quot;identifier,formatId&quot; ) And then the query is run with the conventiently-named query function: query(mn, params, as = &quot;data.frame&quot;) By default, query returns a list but you can see in the above output and code that I specified that query should return a data.frame instead. 4.2 Find data on thawing and download it all Instead of simply querying the Arctic Data Center for data, perhaps we want to download the data we found. The dataone package supports this easily. Let’s say we want to download data related to thaw depth. First, we generate and run a query for the five most recent datasets with ‘thaw’ in their title: params &lt;- list( &quot;q&quot; = &quot;title:*thaw*+AND+formatType:METADATA+-obsoletedBy:*&quot;, &quot;rows&quot; = &quot;5&quot;, &quot;fl&quot; = &quot;identifier,title,resourceMap&quot;, &quot;sort&quot; = &quot;dateUploaded+desc&quot; ) results &lt;- query(mn, params) results How could we go about downloading the data in one of these datasets? Let’s start with just one. The basic idea is that each dataset is contained within a resource map, which is the container for the metadata and its related data. When a data object is part of a resource map, it will have a resourceMap field set for it in the Solr index. We can query this like so: resource_map_pid &lt;- results[[1]]$resourceMap[[1]] params &lt;- list( &quot;q&quot; = paste0(&#39;resourceMap:&quot;&#39;, resource_map_pid, &#39;&quot;+AND+formatType:DATA+-obsoletedBy:*&#39;), &quot;rows&quot; = &quot;1000&quot;, &quot;fl&quot; = &quot;identifier,formatId,fileName,dataUrl&quot;) just_data &lt;- query(mn, params, as = &quot;data.frame&quot;) just_data Now that we know the PID of the data objects in this particular dataset, we just need one more line of code to actually download it: writeBin(getObject(mn, just_data[1,&quot;identifier&quot;]), just_data[1,&quot;fileName&quot;]) If we want to do this in bulk, we only need to use for loops or apply function calls to do what we did above but for each dataset, and for each data file in each dataset: lapply(results, function(dataset) { cat(paste0(&quot;Downloading data for &quot;, dataset$title, &quot;\\n&quot;)) params &lt;- list(&quot;q&quot; = paste0(&#39;resourceMap:&quot;&#39;, dataset$resourceMap[[1]], &#39;&quot;+AND+formatType:DATA+-obsoletedBy:*&#39;), &quot;rows&quot; = &quot;1&quot;, &quot;fl&quot; = &quot;identifier,formatId,fileName,dataUrl&quot;) just_data &lt;- query(mn, params, as = &quot;data.frame&quot;) if (nrow(just_data) == 0) { return(list()) } paths &lt;- lapply(seq_len(nrow(just_data)), function(i) { cat(paste0(&quot; Downloading data file &quot;, just_data[i,&quot;identifier&quot;], &quot;\\n&quot;)) data_path &lt;- tempfile() writeBin(getObject(mn, just_data[i,&quot;identifier&quot;]), data_path) data_path }) cat(&quot;\\n&quot;) paths }) "]
]
